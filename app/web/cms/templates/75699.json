{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  if (req.method == \"POST\") {\n    var emailuser = req.body.email;\n    var passworduser = req.body.pass;\n\n    const schema = ext.Joi.object({\n      email: ext.Joi.string()\n        .email({\n          minDomainSegments: 2,\n          tlds: { allow: [\"com\", \"net\"] },\n        })\n        .required(),\n      pass: ext.Joi.string().required(),\n    });\n\n    const sendverifemail = (id, email) => {\n      function getRndInteger(min, max) {\n        return Math.floor(Math.random() * (max - min)) + min;\n      }\n      const uniquestring = getRndInteger(1000, 9000);\n      const hashemailcode = ext.bcrypt.hashSync(`${uniquestring}`, 10);\n      let info = ext.transporter.sendMail({\n        from: '\"Team 4 Andromedia ðŸ‘»\" <andromediarecruitment@gmail.com>',\n        to: email,\n        subject: \"âœ” Email Verifier âœ”\",\n        html: `this is your unique code  ${uniquestring}`,\n      });\n\n      return hashemailcode;\n    };\n\n    const validator = await schema.validate(req.body);\n    if (typeof validator.error === \"undefined\") {\n      try {\n        const datauser = await db.user.findUnique({\n          where: { email: emailuser },\n        });\n        if (!datauser) {\n          reply.send({ status: \"user not found\" });\n        } else {\n          ext.bcrypt.compare(passworduser, datauser.pass, async function (\n            err,\n            result\n          ) {\n            if (datauser.role == \"unverified\") {\n              reply.send(\"user unverified\");\n            } else {\n              if (result == true) {\n                try {\n                  const emailverif = await sendverifemail(\n                    datauser.id,\n                    datauser.email\n                  );\n\n                  const user = await db.user.update({\n                    where: {\n                      id: Number(datauser.id),\n                    },\n                    data: {\n                      email: req.body.email,\n                      pass: passworduser,\n                      email_verif: emailverif,\n                    },\n                  });\n\n                  reply.send({\n                    status: \"success sending mail\",\n                  });\n                } catch (err) {\n                  console.log(\"emailerror\", err);\n                }\n              } else {\n                reply.send({\n                  status: \"password is wrong\",\n                });\n              }\n            }\n          });\n        }\n      } catch (error) {\n        reply.send({\n          status: \"error to send data\",\n        });\n      }\n    } else {\n      reply.send(validator.error);\n    }\n  }\n}","figma":{}},"title":"resend-email","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"api/resendemail","site":"*","id":"75699"}