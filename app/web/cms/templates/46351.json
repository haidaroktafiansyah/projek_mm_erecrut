{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  const postdata = async () => {\n    const schema = await ext.Joi.object({\n      email: ext.Joi.string()\n        .email({\n          minDomainSegments: 2,\n          tlds: { allow: [\"com\", \"net\"] },\n        })\n        .required(),\n      pass: ext.Joi.string().required(),\n    });\n\n    const sendverifemail = (id, email) => {\n      function getRndInteger(min, max) {\n        return Math.floor(Math.random() * (max - min)) + min;\n      }\n      const uniquestring = getRndInteger(1000, 9000);\n\n      let info = ext.transporter.sendMail({\n        from: '\"Team 4 Andromedia ðŸ‘»\" <andromediarecruitment@gmail.com>',\n        to: email,\n        subject: \"Email Verifier âœ”\",\n        html: `this is your unique code  ${uniquestring}`,\n      });\n    };\n\n    await sendverifemail(9, \"haidaroktafiansyah@gmail.com\");\n\n    try {\n      const { error, value } = schema.validate(req.body);\n      // const validator = await schema.validate();\n\n      if (typeof error === \"undefined\") {\n        const datauser = await db.user.findUnique({\n          where: { email: req.body.email },\n        });\n        if (!datauser) {\n          var dataencrypt = await ext.bcrypt.hashSync(req.body.pass, 8);\n          try {\n            const data = await db.user.create({\n              data: {\n                email: req.body.email,\n                pass: dataencrypt,\n              },\n            });\n            try {\n              // sendverifemail(9, \"haidaroktafiansyah@gmail.com\");\n            } catch (err) {\n              console.log(\"emailerror\", err);\n            }\n            reply.send({\n              data: data,\n              status: \"success created\",\n            });\n          } catch {\n            reply.send({\n              status: \"error connection to db\",\n            });\n          }\n        } else {\n          reply.send({ status: \"email taken\" });\n        }\n      } else {\n        reply.send(error);\n      }\n    } catch (err) {\n      reply.send(\"validation undefined\");\n    }\n  };\n\n  switch (req.method) {\n    case \"POST\":\n      postdata();\n      break;\n  }\n}","figma":{}},"title":"register","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"api/register","site":"*","id":"46351"}