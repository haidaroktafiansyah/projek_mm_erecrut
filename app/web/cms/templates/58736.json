{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  const getdata = async (iddata) => {\n    try {\n      const data = await db.user.findUnique({\n        where: {\n          id: parseInt(iddata),\n        },\n        include: {\n          experience: true,\n          Pendidikan_User: true,\n          Sertifikasi: true,\n        },\n      });\n      reply.send({\n        data: data,\n      });\n    } catch (e) {\n      reply.send(\"not found\").code(404);\n    }\n  };\n\n  const postdata = async (iddata) => {\n    const schema = await ext.Joi.object({\n      email: ext.Joi.string().required(),\n      pass: ext.Joi.string().required(),\n      nama_lengkap: ext.Joi.string().required(),\n      NIK: ext.Joi.string().required(),\n      tanggal_lahir: ext.Joi.string().required(),\n      nomor_hp: ext.Joi.string().required(),\n      jenis_kelamin: ext.Joi.string().required(),\n      alamat: ext.Joi.string().required(),\n      foto_ktp: ext.Joi.string().required(),\n      foto_diri: ext.Joi.string().required(),\n      pendidikan_UserId: ext.Joi.string().optional(),\n      sertifikasiId: ext.Joi.string().optional(),\n      experienceId: ext.Joi.string().optional(),\n    });\n\n    const event = await new Date(req.body.tanggal_lahir);\n    const validator = await schema.validate(req.body);\n    if (typeof validator.error === \"undefined\") {\n      try {\n        const user = await db.user.update({\n          where: {\n            id: Number(iddata),\n          },\n          data: {\n            email: req.body.email,\n            pass: req.body.pass,\n            nama_lengkap: req.body.nama_lengkap,\n            NIK: req.body.NIK,\n            tanggal_lahir: event.toISOString(),\n            nomor_hp: req.body.nomor_hp,\n            jenis_kelamin: req.body.jenis_kelamin,\n            alamat: req.body.alamat,\n            foto_ktp: req.body.foto_ktp,\n            foto_diri: req.body.foto_diri,\n            pendidikan_UserId: parseInt(req.body.pendidikan_UserId),\n            sertifikasiId: parseInt(req.body.sertifikasiId),\n            experienceId: parseInt(req.body.experienceId),\n          },\n        });\n        reply.send({\n          data: user,\n          status: \"success updated\",\n        });\n      } catch (err) {\n        reply.send(\"error to send data\");\n      }\n    } else {\n      reply.send(validator.error);\n    }\n  };\n\n  const deletedata = async (iddata) => {\n    const alamat = await db.user.delete({\n      where: {\n        id: Number(iddata),\n      },\n    });\n    reply.send({\n      data: alamat,\n      status: \"success deleted\",\n    });\n  };\n\n  switch (req.method) {\n    case \"GET\":\n      getdata(params.id);\n      break;\n    case \"POST\":\n      postdata(params.id);\n      break;\n    case \"DELETE\":\n      deletedata(params.id);\n      break;\n  }\n}","figma":{}},"title":"user-id","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"api/user/d/:id","site":"*","id":"58736"}