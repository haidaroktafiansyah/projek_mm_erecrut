{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  const postdata = async () => {\n    const schema = Joi.object({\n      email: Joi.string()\n        .email({\n          minDomainSegments: 2,\n          tlds: { allow: [\"com\", \"net\"] },\n        })\n        .required(),\n      password: Joi.string().required(),\n      username: Joi.string().required(),\n    });\n\n    const validator = await schema.validate(req.body);\n\n    if (typeof validator.error === \"undefined\") {\n      const dataemail = await db.admin.findUnique({\n        where: { email: req.body.email },\n      });\n      if (!dataemail) {\n        const datausername = await db.admin.findUnique({\n          where: { username: req.body.username },\n        });\n        if (!datausername) {\n          var dataencrypt = await bcrypt.hashSync(req.body.password, 8);\n          try {\n            const data = await db.admin.create({\n              data: {\n                email: req.body.email,\n                username: req.body.username,\n                password: dataencrypt,\n              },\n            });\n            reply.send({\n              data: data,\n              status: \"success created\",\n            });\n          } catch {\n            reply.send({\n              status: \"error connection to db\",\n            });\n          }\n        } else {\n          reply.send({ status: \"username taken\" });\n        }\n      } else {\n        reply.send({ status: \"email taken\" });\n      }\n    } else {\n      reply.send(validator.error);\n    }\n  };\n\n  switch (req.method) {\n    case \"POST\":\n      postdata();\n      break;\n  }\n}","figma":{}},"title":"register-admin","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"api/register/admin","site":"*","id":"56477"}