{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  if (req.method == \"POST\") {\n    const emailuser = req.body.email;\n    const passworduser = req.body.pass;\n    const emailverif_user = req.body.email_verif;\n\n    const schema = ext.Joi.object({\n      email: ext.Joi.string()\n        .email({\n          minDomainSegments: 2,\n          tlds: { allow: [\"com\", \"net\"] },\n        })\n        .required(),\n      pass: ext.Joi.string().required(),\n      email_verif: ext.Joi.string().required(),\n    });\n\n    const validator = await schema.validate(req.body);\n    if (typeof validator.error === \"undefined\") {\n      try {\n        const datauser = await db.user.findUnique({\n          where: { email: emailuser },\n        });\n        if (!datauser) {\n          reply.send({ status: \"user not found\" });\n        } else {\n          ext.bcrypt.compare(passworduser, datauser.pass, function (\n            err,\n            result\n          ) {\n            if (result == true) {\n              ext.bcrypt.compare(\n                emailverif_user,\n                datauser.email_verif,\n                async function (err, result) {\n                  if (result == true) {\n                    try {\n                      const user = await db.user.update({\n                        where: {\n                          id: Number(datauser.id),\n                        },\n                        data: {\n                          email: emailuser,\n                          pass: ext.bcrypt.hashSync(passworduser, 8),\n                          role: \"verified\",\n                        },\n                      });\n                      reply.send({\n                        status: \"user has been verified\",\n                        data: user,\n                      });\n                    } catch (err) {\n                      reply.send(\"error connection\");\n                    }\n                  } else {\n                    reply.send({\n                      status: \"OTP is wrong\",\n                    });\n                  }\n                }\n              );\n            } else {\n              reply.send({\n                status: \"password is wrong\",\n              });\n            }\n          });\n        }\n      } catch (error) {\n        reply.send({\n          status: \"error to send data\",\n        });\n      }\n    } else {\n      reply.send(validator.error);\n    }\n  }\n}","figma":{}},"title":"email-verif","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"api/emailverif","site":"*","id":"43543"}