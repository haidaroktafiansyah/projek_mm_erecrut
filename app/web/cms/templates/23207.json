{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  if (req.method == \"POST\") {\n    var emailuser = req.body.email;\n    var passworduser = req.body.pass;\n\n    const schema = ext.Joi.object({\n      email: ext.Joi.string()\n        .email({\n          minDomainSegments: 2,\n          tlds: { allow: [\"com\", \"net\"] },\n        })\n        .required(),\n      pass: ext.Joi.string().required(),\n    });\n\n    const validator = await schema.validate(req.body);\n    if (typeof validator.error === \"undefined\") {\n      try {\n        const datauser = await db.user.findUnique({\n          where: { email: emailuser },\n        });\n        if (!datauser) {\n          reply.send({ status: \"user not found\" });\n        } else {\n          ext.bcrypt.compare(passworduser, datauser.pass, function (\n            err,\n            result\n          ) {\n            if (result == true) {\n              user.user = { role: \"user\", data: datauser };\n              reply.send({\n                status: \"success\",\n                data: datauser,\n              });\n            } else {\n              reply.send({\n                status: \"password is wrong\",\n              });\n            }\n          });\n        }\n      } catch (error) {\n        reply.send({\n          status: \"error to send data\",\n        });\n      }\n    } else {\n      reply.send(validator.error);\n    }\n  }\n}","figma":{}},"title":"login","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","slug":"api/login","site":"*","id":"23207"}