generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://magang:magang123$%^@db.plansys.co:5432/magang4?schema=projek_api"
}

model Alamat_Departemen {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  alamat     String
  kotaId     Int?
  provinsiId Int?
  Kota       Kota?        @relation(fields: [kotaId], references: [id])
  Provinsi   Provinsi?    @relation(fields: [provinsiId], references: [id])
  Departemen Departemen[]
}

model Kota {
  id        Int                 @id @default(autoincrement())
  createdAt DateTime            @default(now())
  nama_kota String
  Alamat    Alamat_Departemen[]
}

model Provinsi {
  id            Int                 @id @default(autoincrement())
  createdAt     DateTime            @default(now())
  nama_provinsi String
  Alamat        Alamat_Departemen[]
}

model Departemen {
  id              Int                @id @default(autoincrement())
  createdAt       DateTime           @default(now())
  nama_departemen String
  alamatId        Int?
  Alamat          Alamat_Departemen? @relation(fields: [alamatId], references: [id])
  proses_apply    Proses_Apply[]
}

model Status_Pekerja {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  status_pekerja String
  lowongan_kerja Lowongan_Kerja[]
}

model Kebutuhan_loker {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  persyaratan    String
  posisi         String
  jobdesc        String
  lowongan_kerja Lowongan_Kerja[]
}

model Lowongan_Kerja {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  info              String
  start_open        DateTime
  end_open          DateTime
  status_lowongan   String
  kebutuhan_lokerId Int?
  status_PekerjaId  Int?
  jumlah_diterima   Int
  Kebutuhan_loker   Kebutuhan_loker? @relation(fields: [kebutuhan_lokerId], references: [id])
  Status_Pekerja    Status_Pekerja?  @relation(fields: [status_PekerjaId], references: [id])
  proses_apply      Proses_Apply[]
}

model Pendidikan_User {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  jenjang             String
  periode             String
  pendidikan_terakhir String
  jurusan             String
  GPA                 String
  user                User[]
}

model Sertifikasi {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  sertif    String
  pembeda   String
  user      User[]
}

model experience {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  skill     String
  user      User[]
}

model User {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  email             String           @unique
  pass              String?
  nama_lengkap      String?
  NIK               String?
  tanggal_lahir     DateTime?
  nomor_hp          String?
  jenis_kelamin     String?
  alamat            String?
  foto_ktp          String?
  foto_diri         String?
  pendidikan_UserId Int?
  sertifikasiId     Int?
  experienceId      Int?
  email_verif       String?
  role              String?          @default("unverified")
  experience        experience?      @relation(fields: [experienceId], references: [id])
  Pendidikan_User   Pendidikan_User? @relation(fields: [pendidikan_UserId], references: [id])
  Sertifikasi       Sertifikasi?     @relation(fields: [sertifikasiId], references: [id])
  proses_apply      Proses_Apply[]
}

model admin {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  username     String         @unique
  password     String
  email        String         @unique
  proses_apply Proses_Apply[]
}

model superadmin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  username  String   @unique
  password  String
  email     String   @unique
}

model Proses_Apply {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  status           String          @default("prosess")
  userId           Int?
  lowongan_KerjaId Int?
  departemenId     Int?
  adminId          Int?
  admin            admin?          @relation(fields: [adminId], references: [id])
  Departemen       Departemen?     @relation(fields: [departemenId], references: [id])
  Lowongan_Kerja   Lowongan_Kerja? @relation(fields: [lowongan_KerjaId], references: [id])
  User             User?           @relation(fields: [userId], references: [id])
  interview        Interview[]
}

model Interview {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  status         String
  proses_ApplyId Int?
  Proses_Apply   Proses_Apply? @relation(fields: [proses_ApplyId], references: [id])
}
